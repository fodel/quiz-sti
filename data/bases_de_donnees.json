[
  {
    "id": 7001,
    "type": "choix_simple",
    "theme": "Bases de données",
    "niveau": "debutant",
    "question": "Quel langage de définition de données est utilisé pour créer, modifier ou supprimer la structure des tables ?",
    "options": [
      "DML (Langage de Manipulation de Données)",
      "DDL (Langage de Définition de Données)",
      "DQL (Langage d'Interrogation de Données)",
      "TCL (Langage de Contrôle de Transaction)"
    ],
    "reponse": [
      "DDL (Langage de Définition de Données)"
    ],
    "explication": "Le DDL (Langage de Définition de Données) inclut les commandes comme `CREATE`, `ALTER` et `DROP` qui agissent sur la structure des objets."
  },
  {
    "id": 7002,
    "type": "choix_simple",
    "theme": "Bases de données",
    "niveau": "debutant",
    "question": "Quelle commande permet de créer une nouvelle table dans la base de données ?",
    "options": [
      "`INSERT`",
      "`NEW TABLE`",
      "`CREATE TABLE`",
      "`MAKE TABLE`"
    ],
    "reponse": [
      "`CREATE TABLE`"
    ],
    "explication": "La commande `CREATE TABLE` est l'instruction DDL standard pour définir une nouvelle table et ses colonnes."
  },
  {
    "id": 7003,
    "type": "choix_simple",
    "theme": "Bases de données",
    "niveau": "debutant",
    "question": "Dans le langage SQL, quel sous-ensemble permet d’ajouter, de modifier ou de supprimer des enregistrements dans une table ?",
    "options": [
      "DDL (Langage de Définition de Données)",
      "DQL (Langage de Requête de Données)",
      "DML (Langage de Manipulation de Données)",
      "DCL (Langage de Contrôle de Données)"
    ],
    "reponse": [
      "DML (Langage de Manipulation de Données)"
    ],
    "explication": "Le DML (Langage de Manipulation de Données) comprend les instructions `INSERT`, `UPDATE` et `DELETE` qui permettent d’ajouter, de modifier ou de supprimer des enregistrements dans les tables."
  },
  {
    "id": 7004,
    "type": "choix_simple",
    "theme": "Bases de données",
    "niveau": "debutant",
    "question": "Quelle commande DML est utilisée pour ajouter de nouvelles lignes dans une table ?",
    "options": [
      "`UPDATE`",
      "`CREATE`",
      "`INSERT`",
      "`ADD`"
    ],
    "reponse": [
      "`INSERT`"
    ],
    "explication": "La commande `INSERT INTO` permet d'ajouter un ou plusieurs nouveaux enregistrements dans une table."
  },
  {
    "id": 7005,
    "type": "choix_simple",
    "theme": "Bases de données",
    "niveau": "debutant",
    "question": "Quelle est la commande principale du DQL (Langage d'Interrogation de Données) ?",
    "options": [
      "`QUERY`",
      "`FETCH`",
      "`GET`",
      "`SELECT`"
    ],
    "reponse": [
      "`SELECT`"
    ],
    "explication": "La commande `SELECT` est utilisée pour extraire et lire des données depuis une ou plusieurs tables."
  },
  {
    "id": 7006,
    "type": "choix_simple",
    "theme": "Bases de données",
    "niveau": "debutant",
    "question": "Quelle commande DDL supprime définitivement une table et tout son contenu ?",
    "options": [
      "`DELETE TABLE`",
      "`REMOVE TABLE`",
      "`DROP TABLE`",
      "`TRUNCATE TABLE`"
    ],
    "reponse": [
      "`DROP TABLE`"
    ],
    "explication": "La commande `DROP TABLE` efface la structure de la table et toutes ses données. C'est une opération irréversible."
  },
  {
    "id": 7007,
    "type": "choix_simple",
    "theme": "Bases de données",
    "niveau": "debutant",
    "question": "Quelle commande DDL modifie la structure d'une table existante ?",
    "options": [
      "`UPDATE TABLE`",
      "`MODIFY TABLE`",
      "`ALTER TABLE`",
      "`CHANGE TABLE`"
    ],
    "reponse": [
      "`ALTER TABLE`"
    ],
    "explication": "La commande `ALTER TABLE` est utilisée pour ajouter, supprimer ou modifier des colonnes dans une table."
  },
  {
    "id": 7008,
    "type": "choix_simple",
    "theme": "Bases de données",
    "niveau": "debutant",
    "question": "Quelle clause de `SELECT` permet de filtrer les lignes retournées ?",
    "options": [
      "`WHERE`",
      "`FILTER`",
      "`ORDER BY`",
      "`GROUP BY`"
    ],
    "reponse": [
      "`WHERE`"
    ],
    "explication": "La clause `WHERE` est utilisée pour spécifier une condition que les lignes doivent respecter pour être incluses dans le résultat."
  },
  {
    "id": 7009,
    "type": "choix_simple",
    "theme": "Bases de données",
    "niveau": "debutant",
    "question": "Quelle clause de `SELECT` permet de trier les résultats ?",
    "options": [
      "`SORT BY`",
      "`ORDER BY`",
      "`GROUP BY`",
      "`HAVING`"
    ],
    "reponse": [
      "`ORDER BY`"
    ],
    "explication": "La clause `ORDER BY` classe les lignes du résultat selon une ou plusieurs colonnes, en ordre ascendant (`ASC`) ou descendant (`DESC`)."
  },
  {
    "id": 7010,
    "type": "choix_simple",
    "theme": "Bases de données",
    "niveau": "debutant",
    "question": "Quelle clause de `SELECT` regroupe des lignes pour utiliser des fonctions d'agrégat ?",
    "options": [
      "`AGGREGATE BY`",
      "`ORDER BY`",
      "`GROUP BY`",
      "`SUMMARIZE BY`"
    ],
    "reponse": [
      "`GROUP BY`"
    ],
    "explication": "La clause `GROUP BY` est utilisée pour rassembler des lignes ayant les mêmes valeurs dans des colonnes spécifiées."
  },
  {
    "id": 7011,
    "type": "choix_simple",
    "theme": "Bases de données",
    "niveau": "debutant",
    "question": "Quelle fonction d'agrégat calcule la moyenne des valeurs d'une colonne ?",
    "options": [
      "`AVG()`",
      "`MEAN()`",
      "`AVERAGE()`",
      "`SUM()`"
    ],
    "reponse": [
      "`AVG()`"
    ],
    "explication": "La fonction `AVG()` (average) calcule la moyenne arithmétique d'un ensemble de valeurs numériques."
  },
  {
    "id": 7012,
    "type": "choix_simple",
    "theme": "Bases de données",
    "niveau": "debutant",
    "question": "Quelle fonction d'agrégat compte le nombre de lignes ?",
    "options": [
      "`NUMBER()`",
      "`COUNT()`",
      "`TOTAL()`",
      "`SUM()`"
    ],
    "reponse": [
      "`COUNT()`"
    ],
    "explication": "`COUNT(*)` compte toutes les lignes d'un groupe, tandis que `COUNT(colonne)` compte les valeurs non nulles de cette colonne."
  },
  {
    "id": 7013,
    "type": "choix_simple",
    "theme": "Bases de données",
    "niveau": "debutant",
    "question": "Quelle fonction d'agrégat trouve la plus grande valeur dans une colonne ?",
    "options": [
      "`MAX()`",
      "`LARGE()`",
      "`HIGH()`",
      "`TOP()`"
    ],
    "reponse": [
      "`MAX()`"
    ],
    "explication": "La fonction `MAX()` retourne la valeur maximale d'une colonne au sein d'un groupe de lignes."
  },
  {
    "id": 7014,
    "type": "choix_simple",
    "theme": "Bases de données",
    "niveau": "debutant",
    "question": "Quelle fonction d'agrégat trouve la plus petite valeur dans une colonne ?",
    "options": [
      "`MIN()`",
      "`SMALL()`",
      "`LOW()`",
      "`BOTTOM()`"
    ],
    "repose": [
      "`MIN()`"
    ],
    "explication": "La fonction `MIN()` retourne la valeur minimale d'une colonne au sein d'un groupe de lignes."
  },
  {
    "id": 7015,
    "type": "choix_simple",
    "theme": "Bases de données",
    "niveau": "debutant",
    "question": "Quelle fonction d'agrégat additionne toutes les valeurs d'une colonne ?",
    "options": [
      "`TOTAL()`",
      "`ADD()`",
      "`SUM()`",
      "`PLUS()`"
    ],
    "reponse": [
      "`SUM()`"
    ],
    "explication": "La fonction `SUM()` calcule la somme totale d'un ensemble de valeurs numériques."
  },
  {
    "id": 7016,
    "type": "choix_simple",
    "theme": "Bases de données",
    "niveau": "debutant",
    "question": "Quelle contrainte est utilisée pour identifier de manière unique chaque ligne d'une table ?",
    "options": [
      "`UNIQUE`",
      "`FOREIGN KEY`",
      "`CHECK`",
      "`PRIMARY KEY`"
    ],
    "reponse": [
      "`PRIMARY KEY`"
    ],
    "explication": "La `PRIMARY KEY` (clé primaire) est une contrainte fondamentale qui garantit l'unicité et l'identification de chaque enregistrement."
  },
  {
    "id": 7017,
    "type": "choix_simple",
    "theme": "Bases de données",
    "niveau": "debutant",
    "question": "Quel opérateur de comparaison est utilisé pour tester l'égalité ?",
    "options": [
      "`==`",
      "`=`",
      "`<>`",
      "`:=`"
    ],
    "reponse": [
      "`=`"
    ],
    "explication": "En SQL, l'opérateur d'égalité utilisé dans les conditions `WHERE` est le simple signe égal (`=`)."
  },
  {
    "id": 7018,
    "type": "choix_simple",
    "theme": "Bases de données",
    "niveau": "debutant",
    "question": "Quel opérateur de comparaison signifie 'différent de' ?",
    "options": [
      "`!=`",
      "`<>`",
      "`~=`",
      "`><`"
    ],
    "reponse": [
      "`<>`"
    ],
    "explication": "L'opérateur `<>` est la notation SQL standard pour 'différent de'."
  },
  {
    "id": 7019,
    "type": "choix_simple",
    "theme": "Bases de données",
    "niveau": "debutant",
    "question": "Dans une clause `ORDER BY`, quel mot-clé est utilisé pour un tri descendant ?",
    "options": [
      "`DESC`",
      "`ASC`",
      "`DOWN`",
      "`REVERSE`"
    ],
    "reponse": [
      "`DESC`"
    ],
    "explication": "`DESC` est l'abréviation de 'descending' (décroissant)."
  },
  {
    "id": 7020,
    "type": "choix_simple",
    "theme": "Bases de données",
    "niveau": "debutant",
    "question": "Dans une clause `ORDER BY`, quel mot-clé est utilisé pour un tri ascendant ?",
    "options": [
      "`ASC`",
      "`DESC`",
      "`UP`",
      "`DEFAULT`"
    ],
    "reponse": [
      "`ASC`"
    ],
    "explication": "`ASC` est l'abréviation de 'ascending' (croissant). C'est le mode de tri par défaut si rien n'est spécifié."
  },
  {
    "id": 7021,
    "type": "choix_multiple",
    "theme": "Bases de données",
    "niveau": "debutant",
    "question": "Quelles sont les commandes du DDL (Langage de Définition de Données) ?",
    "options": [
      "`CREATE`",
      "`ALTER`",
      "`DROP`",
      "`SELECT`"
    ],
    "reponse": [
      "`CREATE`",
      "`ALTER`",
      "`DROP`"
    ],
    "explication": "Le DDL concerne la structure des objets. `SELECT` fait partie du DQL (interrogation)."
  },
  {
    "id": 7022,
    "type": "choix_multiple",
    "theme": "Bases de données",
    "niveau": "debutant",
    "question": "Quelles sont les commandes du DML (Langage de Manipulation de Données) ?",
    "options": [
      "`INSERT`",
      "`UPDATE`",
      "`DELETE`",
      "`CREATE`"
    ],
    "reponse": [
      "`INSERT`",
      "`UPDATE`",
      "`DELETE`"
    ],
    "explication": "Le DML concerne la manipulation des données (lignes). `CREATE` fait partie du DDL (structure)."
  },
  {
    "id": 7023,
    "type": "choix_multiple",
    "theme": "Bases de données",
    "niveau": "debutant",
    "question": "Quelles clauses font partie d'une requête `SELECT` ?",
    "options": [
      "`FROM`",
      "`WHERE`",
      "`ORDER BY`",
      "`SET`"
    ],
    "reponse": [
      "`FROM`",
      "`WHERE`",
      "`ORDER BY`"
    ],
    "explication": "`FROM`, `WHERE`, et `ORDER BY` sont des clauses communes de `SELECT`. `SET` est utilisée avec `UPDATE`."
  },
  {
    "id": 7024,
    "type": "choix_multiple",
    "theme": "Bases de données",
    "niveau": "debutant",
    "question": "Quels sont des types de données valides pour une colonne ?",
    "options": [
      "`INT`",
      "`VARCHAR`",
      "`STRING`",
      "`NUMBER`"
    ],
    "reponse": [
      "`INT`",
      "`VARCHAR`"
    ],
    "explication": "`INT` (entier) et `VARCHAR` (chaîne de longueur variable) sont des types de données SQL standards. `STRING` et `NUMBER` sont des concepts plus généraux mais pas des types SQL."
  },
  {
    "id": 7025,
    "type": "choix_multiple",
    "theme": "Bases de données",
    "niveau": "debutant",
    "question": "Quels sont des opérateurs de comparaison valides ?",
    "options": [
      "`=`",
      "`<>`",
      "`>=`",
      "`==`"
    ],
    "reponse": [
      "`=`",
      "`<>`",
      "`>=`"
    ],
    "explication": "Les opérateurs SQL standards sont `=`, `<>`, `<`, `<=`, `>`, `>=`. `==` n'est pas standard en SQL."
  },
  {
    "id": 7026,
    "type": "choix_multiple",
    "theme": "Bases de données",
    "niveau": "debutant",
    "question": "Quelles sont des fonctions d'agrégat ?",
    "options": [
      "`SUM()`",
      "`MAX()`",
      "`MIN()`",
      "`ORDER BY`"
    ],
    "reponse": [
      "`SUM()`",
      "`MAX()`",
      "`MIN()`"
    ],
    "explication": "`SUM`, `MAX`, et `MIN` sont des fonctions qui calculent une valeur unique à partir d'un ensemble de lignes. `ORDER BY` est une clause, pas une fonction."
  },
  {
    "id": 7027,
    "type": "zone_saisie",
    "theme": "Bases de données",
    "niveau": "debutant",
    "question": "Quelle commande DDL est utilisée pour créer une table ? `... TABLE nomTable (...)`",
    "options": [],
    "reponse": [
      "CREATE"
    ],
    "explication": "La commande pour créer des objets de base de données est `CREATE`."
  },
  {
    "id": 7028,
    "type": "zone_saisie",
    "theme": "Bases de données",
    "niveau": "debutant",
    "question": "Quelle commande DML est utilisée pour ajouter des données ? `... INTO nomTable VALUES (...)`",
    "options": [],
    "reponse": [
      "INSERT"
    ],
    "explication": "La commande pour insérer de nouvelles lignes est `INSERT`."
  },
  {
    "id": 7029,
    "type": "zone_saisie",
    "theme": "Bases de données",
    "niveau": "debutant",
    "question": "Quelle est la commande principale pour lire des données ? `... * FROM nomTable`",
    "options": [],
    "reponse": [
      "SELECT"
    ],
    "explication": "La commande pour interroger (lire) des données est `SELECT`."
  },
  {
    "id": 7030,
    "type": "zone_saisie",
    "theme": "Bases de données",
    "niveau": "debutant",
    "question": "Quelle clause vient après `SELECT ...` pour spécifier la table ? `SELECT * ... nomTable`",
    "options": [],
    "reponse": [
      "FROM"
    ],
    "explication": "La clause `FROM` indique la source des données à sélectionner."
  },
  {
    "id": 7031,
    "type": "zone_saisie",
    "theme": "Bases de données",
    "niveau": "debutant",
    "question": "Quelle clause est utilisée pour filtrer les résultats ? `SELECT * FROM nomTable ... condition`",
    "options": [],
    "reponse": [
      "WHERE"
    ],
    "explication": "La clause `WHERE` est utilisée pour appliquer des conditions de filtrage sur les lignes."
  },
  {
    "id": 7032,
    "type": "zone_saisie",
    "theme": "Bases de données",
    "niveau": "debutant",
    "question": "Quelle clause est utilisée pour trier les résultats ? `SELECT * FROM nomTable ... nomColonne`",
    "options": [],
    "reponse": [
      "ORDER BY"
    ],
    "explication": "La clause `ORDER BY` est utilisée pour classer le jeu de résultats."
  },
  {
    "id": 7033,
    "type": "zone_saisie",
    "theme": "Bases de données",
    "niveau": "debutant",
    "question": "Quelle fonction d'agrégat est utilisée pour compter les lignes ? `SELECT ...( *) FROM nomTable`",
    "options": [],
    "reponse": [
      "COUNT"
    ],
    "explication": "La fonction `COUNT(*)` est utilisée pour compter le nombre total de lignes."
  },
  {
    "id": 7034,
    "type": "zone_saisie",
    "theme": "Bases de données",
    "niveau": "debutant",
    "question": "Quelle commande DDL supprime une table ? `... TABLE nomTable`",
    "options": [],
    "reponse": [
      "DROP"
    ],
    "explication": "La commande `DROP TABLE` supprime une table et toutes ses données."
  },
  {
    "id": 7035,
    "type": "zone_saisie",
    "theme": "Bases de données",
    "niveau": "debutant",
    "question": "Quelle commande DML met à jour des données ? `... nomTable SET colonne = valeur`",
    "options": [],
    "reponse": [
      "UPDATE"
    ],
    "explication": "La commande `UPDATE` est utilisée pour modifier des enregistrements existants."
  },
  {
    "id": 7036,
    "type": "zone_saisie",
    "theme": "Bases de données",
    "niveau": "debutant",
    "question": "Quelle commande DML supprime des données ? `... FROM nomTable WHERE condition`",
    "options": [],
    "reponse": [
      "DELETE"
    ],
    "explication": "La commande `DELETE` est utilisée pour supprimer des enregistrements spécifiques."
  },
  {
    "id": 7037,
    "type": "zone_saisie",
    "theme": "Bases de données",
    "niveau": "debutant",
    "question": "Quelle contrainte définit une clé primaire ? `id INT ...`",
    "options": [],
    "reponse": [
      "PRIMARY KEY"
    ],
    "explication": "La contrainte `PRIMARY KEY` est utilisée dans la définition d'une table pour spécifier la colonne clé."
  },
  {
    "id": 7038,
    "type": "zone_saisie",
    "theme": "Bases de données",
    "niveau": "debutant",
    "question": "Quel mot-clé est utilisé pour un tri décroissant ? `ORDER BY nomColonne ...`",
    "options": [],
    "reponse": [
      "DESC"
    ],
    "explication": "Le mot-clé `DESC` après une colonne dans `ORDER BY` trie les résultats en ordre descendant."
  },
  {
    "id": 7039,
    "type": "zone_saisie",
    "theme": "Bases de données",
    "niveau": "debutant",
    "question": "Quel opérateur signifie 'supérieur à' ? `WHERE age ... 18`",
    "options": [],
    "reponse": [
      ">"
    ],
    "explication": "L'opérateur `>` est utilisé pour filtrer les valeurs strictement supérieures."
  },
  {
    "id": 7040,
    "type": "zone_saisie",
    "theme": "Bases de données",
    "niveau": "debutant",
    "question": "Quelle fonction d'agrégat calcule la somme ? `SELECT ...(salaire) FROM employe`",
    "options": [],
    "reponse": [
      "SUM"
    ],
    "explication": "La fonction `SUM()` est utilisée pour additionner les valeurs d'une colonne."
  },
  {
    "id": 7041,
    "type": "choix_simple",
    "theme": "Bases de données",
    "niveau": "intermediaire",
    "question": "Soit la table `etudiant(idEtu, nomEtu, classe)`. Quelle requête sélectionne les étudiants de la classe '4SI1' ?",
    "options": [
      "`SELECT * FROM etudiant WHERE classe = '4SI1';`",
      "`SELECT etudiant FROM * WHERE classe = '4SI1';`",
      "`SELECT * FROM etudiant FILTER BY classe = '4SI1';`",
      "`GET * FROM etudiant WHERE classe = '4SI1';`"
    ],
    "reponse": [
      "`SELECT * FROM etudiant WHERE classe = '4SI1';`"
    ],
    "explication": "La clause `WHERE` est utilisée pour filtrer les lignes. Les valeurs de type chaîne de caractères doivent être entourées d'apostrophes."
  },
  {
    "id": 7042,
    "type": "choix_simple",
    "theme": "Bases de données",
    "niveau": "intermediaire",
    "question": "```sql\nSELECT nomEtu FROM etudiant ORDER BY classe ASC, nomEtu DESC;\n```\nComment le résultat sera-t-il trié ?",
    "options": [
      "D'abord par nom décroissant, puis par classe croissant",
      "Seulement par nom décroissant",
      "D'abord par classe croissant, puis pour une même classe, par nom décroissant",
      "La requête est invalide"
    ],
    "reponse": [
      "D'abord par classe croissant, puis pour une même classe, par nom décroissant"
    ],
    "explication": "`ORDER BY` peut prendre plusieurs colonnes. Le tri se fait selon la première colonne, puis la seconde est utilisée pour départager les égalités de la première, et ainsi de suite."
  },
  {
    "id": 7043,
    "type": "choix_simple",
    "theme": "Bases de données",
    "niveau": "intermediaire",
    "question": "```sql\nUPDATE etudiant SET classe = '4SI2' WHERE classe = '4SI1';\n```\nQuel est l'effet de cette commande ?",
    "options": [
      "Elle ajoute de nouveaux étudiants à la classe '4SI2'",
      "Elle change la classe de tous les étudiants de '4SI1' en '4SI2'",
      "Elle supprime les étudiants de la classe '4SI1'",
      "Elle sélectionne les étudiants des deux classes"
    ],
    "reponse": [
      "Elle change la classe de tous les étudiants de '4SI1' en '4SI2'"
    ],
    "explication": "La commande `UPDATE` modifie les enregistrements. La clause `SET` définit la nouvelle valeur et la clause `WHERE` spécifie quelles lignes sont concernées."
  },
  {
    "id": 7044,
    "type": "choix_simple",
    "theme": "Bases de données",
    "niveau": "intermediaire",
    "question": "Soit la table `evaluation(idEtu#, idMat#, note)`. Quelle requête calcule la note moyenne pour la matière avec l'ID 3 ?",
    "options": [
      "`SELECT AVG(note) FROM evaluation WHERE idMat = 3;`",
      "`SELECT SUM(note) FROM evaluation WHERE idMat = 3;`",
      "`SELECT COUNT(note) FROM evaluation WHERE idMat = 3;`",
      "`SELECT AVG(note) FROM evaluation GROUP BY idEtu;`"
    ],
    "reponse": [
      "`SELECT AVG(note) FROM evaluation WHERE idMat = 3;`"
    ],
    "explication": "La fonction d'agrégat `AVG()` est utilisée sur la colonne `note`, et la clause `WHERE` filtre pour ne considérer que la matière avec `idMat = 3`."
  },
  {
    "id": 7045,
    "type": "choix_simple",
    "theme": "Bases de données",
    "niveau": "intermediaire",
    "question": "```sql\nSELECT COUNT(DISTINCT classe) FROM etudiant;\n```\nQue retourne cette requête?",
    "options": [
      "Le nombre total d'étudiants",
      "Le nombre de classes différentes (uniques)",
      "La liste de toutes les classes",
      "Une erreur de syntaxe"
    ],
    "reponse": [
      "Le nombre de classes différentes (uniques)"
    ],
    "explication": "Le mot-clé `DISTINCT` à l'intérieur de `COUNT()` demande de ne compter que les valeurs uniques de la colonne `classe`, ignorant ainsi les doublons."
  },
  {
    "id": 7046,
    "type": "choix_multiple",
    "theme": "Bases de données",
    "niveau": "intermediaire",
    "question": "```sql\nSELECT classe, AVG(note) FROM evaluation GROUP BY classe;\n```\nQuelles sont les affirmations correctes à propos de cette requête?",
    "options": [
      "Elle retournera une ligne pour chaque classe distincte",
      "Elle calculera la note moyenne pour chaque classe",
      "Elle affichera la note de chaque élève",
      "La clause `GROUP BY` est essentielle pour que `AVG()` fonctionne par classe"
    ],
    "reponse": [
      "Elle retournera une ligne pour chaque classe distincte",
      "Elle calculera la note moyenne pour chaque classe",
      "La clause `GROUP BY` est essentielle pour que `AVG()` fonctionne par classe"
    ],
    "explication": "La clause `GROUP BY classe` regroupe toutes les notes par classe, puis la fonction `AVG(note)` est appliquée à chacun de ces groupes."
  },
  {
    "id": 7047,
    "type": "choix_simple",
    "theme": "Bases de données",
    "niveau": "intermediaire",
    "question": "Quelle commande ajoute une nouvelle colonne `age` de type `INT` à la table `etudiant` ?",
    "options": [
      "`CREATE COLUMN age INT IN etudiant;`",
      "`INSERT COLUMN age INT INTO etudiant;`",
      "`ALTER TABLE etudiant ADD age INT;`",
      "`UPDATE TABLE etudiant ADD age INT;`"
    ],
    "reponse": [
      "`ALTER TABLE etudiant ADD age INT;`"
    ],
    "explication": "`ALTER TABLE` est la commande DDL utilisée pour modifier la structure d'une table, et la clause `ADD` permet d'ajouter une nouvelle colonne."
  },
  {
    "id": 7048,
    "type": "choix_simple",
    "theme": "Bases de données",
    "niveau": "intermediaire",
    "question": "```sql\nDELETE FROM evaluation;\n```\nQuel est l'effet de cette commande si elle est exécutée sans clause `WHERE` ?",
    "options": [
      "Elle supprime la table `evaluation`",
      "Elle génère une erreur de syntaxe",
      "Elle supprime TOUTES les lignes de la table `evaluation`",
      "Elle ne fait rien par mesure de sécurité"
    ],
    "reponse": [
      "Elle supprime TOUTES les lignes de la table `evaluation`"
    ],
    "explication": "Une commande `DELETE` sans clause `WHERE` est très dangereuse car elle s'applique à tous les enregistrements de la table, la vidant complètement."
  },
  {
    "id": 7049,
    "type": "zone_saisie",
    "theme": "Bases de données",
    "niveau": "intermediaire",
    "question": "Complétez la requête pour sélectionner les noms des étudiants dont la classe N'EST PAS '4SI1'.\n```sql\nSELECT nomEtu FROM etudiant ... classe <> '4SI1';\n```",
    "options": [],
    "reponse": [
      "WHERE"
    ],
    "explication": "La clause `WHERE` est utilisée pour introduire les conditions de filtrage des lignes."
  },
  {
    "id": 7050,
    "type": "zone_saisie",
    "theme": "Bases de données",
    "niveau": "intermediaire",
    "question": "Complétez la requête pour trier les étudiants par nom de famille par ordre alphabétique.\n```sql\nSELECT * FROM etudiant ... nomEtu ASC;\n```",
    "options": [],
    "reponse": [
      "ORDER BY"
    ],
    "explication": "La clause `ORDER BY` est utilisée pour spécifier le critère de tri des résultats."
  },
  {
    "id": 7051,
    "type": "choix_simple",
    "theme": "Bases de données",
    "niveau": "avance",
    "question": "Que fait cette requête ?\n```sql\nSELECT classe, AVG(note) AS moyenne\nFROM etudiant, evaluation\nWHERE etudiant.idEtu = evaluation.idEtu\nGROUP BY classe\nHAVING AVG(note) > 12;\n```",
    "options": [
      "Elle affiche la moyenne de tous les étudiants dont la note est > 12",
      "Elle affiche les classes dont la note moyenne est supérieure à 12",
      "Elle génère une erreur car `WHERE` et `HAVING` sont incompatibles",
      "Elle affiche la moyenne de la classe '12'"
    ],
    "reponse": [
      "Elle affiche les classes dont la note moyenne est supérieure à 12"
    ],
    "explication": "La requête calcule d'abord la moyenne par classe (`GROUP BY`), puis la clause `HAVING` filtre ces groupes pour ne garder que ceux dont la moyenne calculée est supérieure à 12."
  },
  {
    "id": 7052,
    "type": "choix_simple",
    "theme": "Bases de données",
    "niveau": "avance",
    "question": "Dans une jointure implicite `FROM tableA, tableB`, si la condition de jointure dans le `WHERE` est oubliée, quel est le résultat ?",
    "options": [
      "Une erreur de syntaxe",
      "Un produit cartésien (toutes les lignes de A combinées avec toutes les lignes de B)",
      "Uniquement les lignes de la table A",
      "Un résultat vide"
    ],
    "reponse": [
      "Un produit cartésien (toutes les lignes de A combinées avec toutes les lignes de B)"
    ],
    "explication": "L'oubli de la condition de jointure (`tableA.id = tableB.id`) est une erreur logique grave qui produit un résultat souvent énorme et incorrect, appelé produit cartésien."
  },
  {
    "id": 7053,
    "type": "zone_saisie",
    "theme": "Bases de données",
    "niveau": "avance",
    "question": "Complétez la requête pour trouver les classes ayant plus de 30 étudiants.\n```sql\nSELECT classe FROM etudiant GROUP BY classe ... COUNT(*) > 30;\n```",
    "options": [],
    "reponse": [
      "HAVING"
    ],
    "explication": "La condition `COUNT(*) > 30` porte sur un résultat d'agrégation, elle doit donc être placée dans une clause `HAVING`, et non dans un `WHERE`."
  },
  {
    "id": 7054,
    "type": "choix_simple",
    "theme": "Bases de données",
    "niveau": "avance",
    "question": "Quelle est la différence entre une clé primaire (`PRIMARY KEY`) et une clé étrangère (`FOREIGN KEY`) ?",
    "options": [
      "Il n'y en a pas",
      "Une clé primaire identifie une ligne dans sa propre table, une clé étrangère référence une clé primaire dans une autre table",
      "Une clé étrangère doit être unique, une clé primaire non",
      "Une table ne peut avoir qu'une seule clé étrangère"
    ],
    "reponse": [
      "Une clé primaire identifie une ligne dans sa propre table, une clé étrangère référence une clé primaire dans une autre table"
    ],
    "explication": "La clé étrangère est le mécanisme qui permet de créer et de garantir l'intégrité des relations entre les tables."
  },
  {
    "id": 7055,
    "type": "zone_saisie",
    "theme": "Bases de données",
    "niveau": "avance",
    "question": "Écrivez la commande DDL pour supprimer la colonne `dateNaissance` de la table `etudiant`.",
    "options": [],
    "reponse": [
      "ALTER TABLE etudiant DROP COLUMN dateNaissance;"
    ],
    "explication": "La commande `ALTER TABLE ... DROP COLUMN ...` est utilisée pour supprimer une colonne existante d'une table."
  },
  {
    "id": 7056,
    "type": "choix_simple",
    "theme": "Bases de données",
    "niveau": "avance",
    "question": "```sql\nUPDATE evaluation SET note = note + 1 WHERE idEtu = 8;\n```\nQue fait cette commande ?",
    "options": [
      "Elle ajoute une nouvelle note pour l'étudiant 8",
      "Elle augmente de 1 point toutes les notes de l'étudiant 8",
      "Elle met à jour la structure de la table",
      "Elle supprime les notes de l'étudiant 8"
    ],
    "reponse": [
      "Elle augmente de 1 point toutes les notes de l'étudiant 8"
    ],
    "explication": "La commande `UPDATE` modifie les valeurs existantes. La clause `SET note = note + 1` augmente la valeur de la colonne `note` de 1 pour toutes les lignes où `idEtu = 8`."
  },
  {
    "id": 7057,
    "type": "zone_saisie",
    "theme": "Bases de données",
    "niveau": "avance",
    "question": "Complétez la requête pour afficher, pour chaque matière, la note la plus haute et la plus basse.\n```sql\nSELECT libelleMat, ...(note), MIN(note)\nFROM matiere, evaluation\nWHERE matiere.idMat = evaluation.idMat\nGROUP BY libelleMat;\n```",
    "options": [],
    "reponse": [
      "MAX"
    ],
    "explication": "Les fonctions d'agrégat `MAX()` et `MIN()` peuvent être utilisées dans la même requête pour obtenir les valeurs extrêmes pour chaque groupe."
  },
  {
    "id": 7058,
    "type": "choix_simple",
    "theme": "Bases de données",
    "niveau": "avance",
    "question": "Une table `etudiant` contient 100 lignes. La requête `SELECT * FROM etudiant, classe;` où `classe` a 5 lignes, retournera combien de lignes si aucune condition de jointure n'est spécifiée ?",
    "options": [
      "`100`",
      "`5`",
      "`105`",
      "`500`"
    ],
    "reponse": [
      "`500`"
    ],
    "explication": "En l'absence de condition de jointure, le SGBD effectue un produit cartésien, combinant chaque ligne de la première table avec chaque ligne de la seconde (100 * 5 = 500)."
  },
  {
    "id": 7059,
    "type": "choix_simple",
    "theme": "Bases de données",
    "niveau": "avance",
    "question": "Quelle commande est utilisée pour modifier la valeur d'une colonne dans une table existante ?",
    "options": [
      "`MODIFY`",
      "`CHANGE`",
      "`UPDATE`",
      "`ALTER`"
    ],
    "reponse": [
      "`UPDATE`"
    ],
    "explication": "La commande `UPDATE` est utilisée pour modifier les valeurs des colonnes dans les enregistrements existants d'une table."
  },
  {
    "id": 7060,
    "type": "choix_multiple",
    "theme": "Bases de données",
    "niveau": "debutant",
    "question": "Quelles commandes font partie du DDL (Data Definition Language) ?",
    "options": [
      "`CREATE`",
      "`ALTER`",
      "`DROP`",
      "`SELECT`"
    ],
    "reponse": [
      "`CREATE`",
      "`ALTER`",
      "`DROP`"
    ],
    "explication": "Le DDL est utilisé pour définir la structure : `CREATE` pour créer, `ALTER` pour modifier, et `DROP` pour supprimer."
  },
  {
    "id": 7061,
    "type": "choix_multiple",
    "theme": "Bases de données",
    "niveau": "debutant",
    "question": "Quelles commandes font partie du DML (Data Manipulation Language) ?",
    "options": [
      "`INSERT`",
      "`UPDATE`",
      "`DELETE`",
      "`GRANT`"
    ],
    "reponse": [
      "`INSERT`",
      "`UPDATE`",
      "`DELETE`"
    ],
    "explication": "Le DML est utilisé pour manipuler les données (lignes). `GRANT` n'est pas dans le périmètre."
  },
  {
    "id": 7062,
    "type": "choix_multiple",
    "theme": "Bases de données",
    "niveau": "debutant",
    "question": "Quelles sont des fonctions d'agrégat valides en SQL ?",
    "options": [
      "`COUNT()`",
      "`SUM()`",
      "`AVG()`",
      "`TOTAL()`"
    ],
    "reponse": [
      "`COUNT()`",
      "`SUM()`",
      "`AVG()`"
    ],
    "explication": "`COUNT`, `SUM`, `AVG`, `MIN` et `MAX` sont des fonctions d'agrégat standards. `TOTAL` n'est pas une fonction SQL standard."
  },
  {
    "id": 7063,
    "type": "choix_multiple",
    "theme": "Bases de données",
    "niveau": "debutant",
    "question": "Quelles clauses peuvent être utilisées avec `SELECT` pour filtrer et trier ?",
    "options": [
      "`WHERE`",
      "`ORDER BY`",
      "`ALTER`",
      "`DROP`"
    ],
    "reponse": [
      "`WHERE`",
      "`ORDER BY`"
    ],
    "explication": "`WHERE` est utilisée pour filtrer les lignes avant le tri, et `ORDER BY` est utilisée pour trier le résultat final."
  },
  {
    "id": 7064,
    "type": "choix_multiple",
    "theme": "Bases de données",
    "niveau": "debutant",
    "question": "Quels opérateurs de comparaison sont valides dans une clause `WHERE` ?",
    "options": [
      "`=`",
      "`<>`",
      "`>=`",
      "`==`"
    ],
    "reponse": [
      "`=`",
      "`<>`",
      "`>=`"
    ],
    "explication": "Les opérateurs SQL standards pour la comparaison sont `=`, `<>`, `>`, `<`, `>=` et `<=`. `==` n'est pas un opérateur SQL standard."
  },
  {
    "id": 7065,
    "type": "choix_simple",
    "theme": "Bases de données",
    "niveau": "debutant",
    "question": "Quelle est la principale différence entre les fonctions d’agrégat `SUM()` et `COUNT()` en SQL ?",
    "options": [
      "`SUM()` additionne les valeurs numériques, tandis que `COUNT()` compte le nombre d’enregistrements.",
      "`SUM()` compte le nombre d’enregistrements, tandis que `COUNT()` additionne les valeurs numériques.",
      "Les deux fonctions effectuent exactement la même opération.",
      "Aucune de ces réponses n’est correcte."
    ],
    "reponse": [
      "`SUM()` additionne les valeurs numériques, tandis que `COUNT()` compte le nombre d’enregistrements."
    ],
    "explication": "La fonction `SUM()` calcule la somme d’une colonne numérique, alors que `COUNT()` retourne le nombre total d’enregistrements (lignes) correspondant à une condition donnée."
  },
  {
    "id": 7066,
    "type": "choix_multiple",
    "theme": "Bases de données",
    "niveau": "debutant",
    "question": "Dans une commande `CREATE TABLE`, quels types de données peut-on utiliser pour les colonnes ?",
    "options": [
      "`INT`",
      "`VARCHAR(n)`",
      "`BOOLEAN`",
      "`TEXT(n)`"
    ],
    "reponse": [
      "`INT`",
      "`VARCHAR(n)`"
    ],
    "explication": " `INT` pour les entiers et `VARCHAR` pour les chaînes de caractères de longueur variable."
  },
  {
    "id": 7067,
    "type": "choix_simple",
    "theme": "Bases de données",
    "niveau": "intermediaire",
    "question": "```sql\nSELECT COUNT(DISTINCT classe) FROM etudiant;\n```\nQue retourne cette requête (avec `DISTINCT` non listé) ?",
    "options": [
      "Le nombre total d'étudiants",
      "Le nombre de classes différentes (uniques)",
      "La liste de toutes les classes",
      "Une erreur de syntaxe"
    ],
    "reponse": [
      "Le nombre de classes différentes (uniques)"
    ],
    "explication": "Le mot-clé `DISTINCT` à l'intérieur de `COUNT()` demande de ne compter que les valeurs uniques de la colonne `classe`, ignorant ainsi les doublons."
  },
  {
    "id": 7068,
    "type": "choix_multiple",
    "theme": "Bases de données",
    "niveau": "intermediaire",
    "question": "```sql\nSELECT classe, AVG(note) FROM evaluation GROUP BY classe;\n```\nQuelles sont les affirmations correctes à propos de cette requête (en supposant une jointure implicite correcte) ?",
    "options": [
      "Elle retournera une ligne pour chaque classe distincte",
      "Elle calculera la note moyenne pour chaque classe",
      "Elle affichera la note de chaque élève",
      "La clause `GROUP BY` est essentielle pour que `AVG()` fonctionne par classe"
    ],
    "reponse": [
      "Elle retournera une ligne pour chaque classe distincte",
      "Elle calculera la note moyenne pour chaque classe",
      "La clause `GROUP BY` est essentielle pour que `AVG()` fonctionne par classe"
    ],
    "explication": "La clause `GROUP BY classe` regroupe toutes les notes par classe, puis la fonction `AVG(note)` est appliquée à chacun de ces groupes."
  },
{
  "id": 7069,
  "type": "choix_simple",
  "theme": "Bases de données",
  "niveau": "avance",
  "question": "Que fait cette requête ?\n```sql\nSELECT ville, MAX(temperature) AS temp_max, MIN(temperature) AS temp_min\nFROM mesures\nGROUP BY ville\nHAVING MAX(temperature) > 35;\n```",
  "options": [
    "Elle affiche toutes les températures enregistrées dans chaque ville",
    "Elle affiche uniquement les villes où la température minimale est > 35",
    "Elle affiche les villes où la température maximale a dépassé 35",
    "Elle génère une erreur car `MAX()` et `MIN()` ne peuvent pas être utilisés ensemble"
  ],
  "reponse": [
    "Elle affiche les villes où la température maximale a dépassé 35"
  ],
  "explication": "La requête regroupe les mesures par ville (`GROUP BY`). Pour chaque ville, elle calcule la température maximale et minimale. La clause `HAVING` filtre pour ne conserver que les villes dont la température maximale est supérieure à 35."
}
,
 {
  "id": 7070,
  "type": "zone_saisie",
  "theme": "Bases de données",
  "niveau": "avance",
  "question": "Complétez la requête pour afficher, pour chaque matière, la note moyenne.\n```sql\nSELECT libelleMat, ...(note)\nFROM matiere, evaluation\nWHERE matiere.idMat = evaluation.idMat\nGROUP BY libelleMat;\n```",
  "options": [],
  "reponse": [
    "AVG"
  ],
  "explication": "La fonction d'agrégat `AVG()` permet de calculer la moyenne des notes pour chaque matière regroupée avec `GROUP BY`."
},
  {
  "id": 7071,
  "type": "zone_saisie",
  "theme": "Bases de données",
  "niveau": "avance",
  "question": "Complétez la requête SQL pour afficher (colonnes: matiere, moyenne) la moyenne des notes triée par matiere croissant.\n```sql\nSELECT idMat, AVG(note) AS moyenne FROM evaluation ... ORDER BY idMat ASC;\n```",
  "options": [],
  "reponse": [
    "GROUP BY idMat"
  ],
  "explication": "La clause `GROUP BY idMat` est nécessaire pour regrouper les notes par matière avant d’appliquer la fonction d’agrégat `AVG()`."
},
{
  "id": 7072,
  "type": "zone_saisie",
  "theme": "Bases de données",
  "niveau": "intermediaire",
  "question": "Complétez la requête SQL en ajoutant la clause manquante pour trier les résultats par classe en ordre croissant :\n```sql\nSELECT ET.classe, AVG(EV.note) AS moyenne\nFROM etudiant ET, evaluation EV\nWHERE ET.idEtu = EV.idEtu\nGROUP BY ET.classe\n```",
  "options": [],
  "reponse": ["ORDER BY ET.classe ASC"],
  "explication": "La clause `ORDER BY ET.classe ASC` permet de trier le résultat des moyennes de chaque classe dans l'ordre croissant (alphabétique ou numérique) des classes."
},
 {
  "id": 7073,
  "type": "zone_saisie",
  "theme": "Bases de données",
  "niveau": "intermediaire",
  "question": "Complétez la requête SQL en ajoutant la clause manquante pour filtrer les matières ayant au moins 3 notes :\n```sql\nSELECT idMat, COUNT(*) AS nb\nFROM evaluation\nGROUP BY idMat\n______\nORDER BY nb DESC;\n```",
  "options": [],
  "reponse": ["HAVING COUNT(*) >= 3"],
  "explication": "La clause `HAVING` permet de filtrer les groupes après le `GROUP BY`. On utilise la condition sur la fonction d'agrégat `COUNT(*)` pour ne garder que les groupes avec au moins 3 enregistrements."
},
{
  "id": 7074,
  "type": "zone_saisie",
  "theme": "Bases de données",
  "niveau": "intermediaire",
  "question": "Complétez la requête SQL pour afficher la liste des clients (toutes les colonnes) dont l'adresse contient le mot 'TUNIS' :\n```sql\nSELECT *\nFROM clients\n WHERE adresse ______;\n```",
  "options": [],
  "reponse": ["LIKE '%TUNIS%'"],
  "explication": "La clause `WHERE` avec l'opérateur `LIKE` et les wildcards `%` permet de filtrer les adresses contenant le mot 'TUNIS' n'importe où dans le texte."
},
  {
    "id": 7075,
    "type": "zone_saisie",
    "theme": "Bases de données",
    "niveau": "avance",
    "question": "Écris la commande SQL pour supprimer la table ArchivesNotes.",
    "options": [],
    "reponse": [
      "DROP TABLE ArchivesNotes;"
    ],
    "explication": "DROP TABLE supprime l'objet."
  },
{
  "id": 7076,
  "type": "zone_saisie",
  "theme": "Bases de données",
  "niveau": "avance",
  "question": "Complétez la requête SQL pour augmenter de 50% le prix de tous les produits :\n```sql\nUPDATE produits\nSET prix = prix * ___\n```",
  "options": [],
  "reponse": ["1.5"],
  "explication": "Multiplier par 1.5 équivaut à une augmentation de 50% du prix original."
},
{
  "id": 7077,
  "type": "choix_multiple",
  "theme": "Bases de données",
  "niveau": "intermediaire",
  "question": "Quelles sont les commandes INSERT correctes pour ajouter un nouveau client avec le nom 'Dupont' et le prénom 'Jean' dans une table 'clients' ayant les colonnes id (auto-incrémenté), nom, prenom, et email ?",
  "options": [
    "INSERT INTO clients (nom, prenom) VALUES ('Dupont', 'Jean');",
    "INSERT INTO clients VALUES (1, 'Dupont', 'Jean', 'jean.dupont@email.com');",
    "INSERT INTO clients (nom) VALUES ('Dupont');",
    "INSERT INTO clients (prenom, nom) VALUES ('Jean', 'Dupont');",
    "INSERT INTO clients VALUES ('Dupont', 'Jean');"
  ],
  "reponse": [
    "INSERT INTO clients (nom, prenom) VALUES ('Dupont', 'Jean');",
    "INSERT INTO clients (prenom, nom) VALUES ('Jean', 'Dupont');"
  ],
  "explication": "Les commandes correctes sont celles qui spécifient explicitement les colonnes 'nom' et 'prenom' avec les valeurs appropriées. L'omission de 'id' (auto-incrémenté) et 'email' est acceptable si ces colonnes ont des valeurs par défaut ou sont nullable. L'ordre des colonnes dans la clause INSERT n'a pas d'importance tant que les valeurs correspondent. Les autres options sont incorrectes car elles omettent des colonnes obligatoires, spécifient un id fixe (risque de doublon), ou ne correspondent pas au schéma de la table."
},
  {
    "id": 7078,
    "type": "zone_saisie",
    "theme": "Bases de données",
    "niveau": "intermediaire",
    "question": "Complétez la requête pour trouver la note la plus élevée dans la table `evaluation`.\n```sql\nSELECT ...(note) FROM evaluation;\n```",
    "options": [],
    "reponse": [
      "MAX"
    ],
    "explication": "La fonction d'agrégat `MAX()` retourne la valeur maximale dans un ensemble de valeurs."
  },
{
  "id": 7079,
  "type": "zone_saisie",
  "theme": "Bases de données",
  "niveau": "intermediaire",
  "question": "Complétez la commande SQL pour modifier le type de données de la colonne 'age' en INT dans la table 'etudiant'.\n```sql\nALTER TABLE etudiant ... age INT;\n```",
  "options": [],
  "reponse": ["ALTER COLUMN"],
  "explication": "La clause `ALTER COLUMN` est utilisée dans la commande `ALTER TABLE` pour modifier le type de données d'une colonne existante."
},
{
  "id": 7080,
  "type": "zone_saisie",
  "theme": "Bases de données",
  "niveau": "intermediaire",
  "question": "Complétez la commande SQL pour ajouter une contrainte garantissant que le prix soit toujours strictement positif :\n```sql\nALTER TABLE produits ADD CONSTRAINT chk_prix ______;\n```",
  "options": [],
  "reponse": ["CHECK (prix > 0)"],
  "explication": "La clause `CHECK` permet de définir une condition que les valeurs doivent respecter. Ici, elle garantit que le prix reste supérieur à 0."
},
  {
    "id": 7081,
    "type": "choix_simple",
    "theme": "Bases de données",
    "niveau": "intermediaire",
    "question": "```sql\nSELECT nomEtu, prenomEtu FROM etudiant, evaluation \nWHERE etudiant.idEtu = evaluation.idEtu AND evaluation.note >= 10;\n```\nQue fait cette requête ?",
    "options": [
      "Elle liste tous les étudiants et toutes les notes",
      "Elle liste les noms et prénoms des étudiants ayant au moins une note supérieure ou égale à 10",
      "Elle liste les étudiants qui n'ont aucune note",
      "Elle génère une erreur à cause de la virgule"
    ],
    "reponse": [
      "Elle liste les noms et prénoms des étudiants ayant au moins une note supérieure ou égale à 10"
    ],
    "explication": "C'est une jointure implicite. Elle combine les tables `etudiant` et `evaluation` sur leur clé commune (`idEtu`), puis filtre pour ne garder que les enregistrements où la note est supérieure ou égale à 10."
  },
  {
    "id": 7082,
    "type": "choix_simple",
    "theme": "Bases de données",
    "niveau": "intermediaire",
    "question": "Quelle est la différence entre `VARCHAR` et `INT` ?",
    "options": [
      "Aucune, ils stockent tous les deux du texte",
      "`VARCHAR` stocke des chaînes de caractères, `INT` stocke des nombres entiers",
      "`INT` est pour les petits nombres, `VARCHAR` pour les grands",
      "`VARCHAR` est une contrainte, `INT` est un type"
    ],
    "reponse": [
      "`VARCHAR` stocke des chaînes de caractères, `INT` stocke des nombres entiers"
    ],
    "explication": "Choisir le bon type de données est crucial. `VARCHAR` est pour le texte (noms, adresses), `INT` est pour les nombres entiers (âges, identifiants, quantités)."
  },
{
  "id": 7083,
  "type": "zone_saisie",
  "theme": "Bases de données",
  "niveau": "intermediaire",
  "question": "Complétez la requête pour afficher, pour chaque classe, le nombre d'étudiants.\n```sql\nSELECT classe, ...(*)\nFROM etudiant\nGROUP BY classe;\n```",
  "options": [],
  "reponse": ["COUNT"],
  "explication": "La fonction d'agrégat `COUNT(*)` compte le nombre de lignes (étudiants) dans chaque groupe de classe."
},
  {
    "id": 7084,
    "type": "choix_multiple",
    "theme": "Bases de données",
    "niveau": "avance",
    "question": "Dans ```sql\nSELECT etudiant.classe, AVG(evaluation.note) AS m \nFROM etudiant, evaluation \nWHERE etudiant.idEtu = evaluation.idEtu \nGROUP BY etudiant.classe \nHAVING AVG(evaluation.note) >= 10;``` que fait `HAVING` ?",
    "options": [
      "Filtre les classes selon la moyenne",
      "Trie les classes",
      "Crée une table",
      "Met à jour des lignes"
    ],
    "reponse": [
      "Filtre les classes selon la moyenne"
    ],
    "explication": "`HAVING` garde uniquement les groupes respectant la condition."
  },
  {
    "id": 7085,
    "type": "choix_simple",
    "theme": "Bases de données",
    "niveau": "avance",
    "question": "Dans ```sql\nUPDATE evaluation \nSET note = 20 \nWHERE idEtu = 8 AND idMat = 'HTML';``` que modifie la requête ?",
    "options": [
      "La note HTML de l'élève 8",
      "Toutes les notes HTML",
      "La structure de la table",
      "Les droits d'accès"
    ],
    "reponse": [
      "La note HTML de l'élève 8"
    ],
    "explication": "La condition cible une seule ligne potentielle."
  },
{
"id": 7086,
"type": "zone_saisie",
"theme": "Bases de données",
"niveau": "avance",
"question": "Complétez la requête SQL pour afficher tous les étudiants dont l'email se termine par 'mayli.tn' :```sql\nSELECT *\nFROM etudiants\nWHERE email ______;```",
"options": [],
"reponse": ["LIKE '%mayli.tn'"],
"explication": "L'opérateur LIKE avec le wildcard % permet de filtrer les emails qui se terminent par 'mayli.tn'. Le % représente zéro ou plusieurs caractères avant 'mayli.tn'."
},
  {
    "id": 7087,
    "type": "zone_saisie",
    "theme": "Bases de données",
    "niveau": "intermediaire",
    "question": "Complétez la requête SQL pour afficher le minimum et maximum des notes par étudiant :\n```sql\nSELECT nomEtu, MIN(note), MAX(note)\nFROM etudiants, notes\nWHERE etudiants.id = notes.etudiant_id\n______;\n```",
    "options": [],
    "reponse": ["GROUP BY nomEtu"],
    "explication": "La clause GROUP BY est nécessaire pour regrouper les résultats par étudiant et calculer les agrégations (MIN, MAX) pour chaque groupe."
  },
  {
    "id": 7088,
    "type": "zone_saisie",
    "theme": "Bases de données",
    "niveau": "intermediaire",
    "question": "Complétez la requête SQL pour augmenter de 1 point les notes de CSS des étudiants de Tunis :\n```sql\nUPDATE notes\nSET note = note + 1\nWHERE matiere = 'CSS'\nAND etudiant_id IN (SELECT id FROM etudiants WHERE ville = 'Tunis');\n```\nQuelle clause permettrait de limiter cette modification aux notes supérieures à 10 ?\n```sql\n______ note > 10;\n```",
    "options": [],
    "reponse": ["AND"],
    "explication": "La clause AND permet d'ajouter une condition supplémentaire pour filtrer les notes supérieures à 10."
  },
  {
    "id": 7089,
    "type": "zone_saisie",
    "theme": "Bases de données",
    "niveau": "intermediaire",
    "question": "Complétez la requête SQL pour supprimer les notes de JavaScript des étudiants de Sfax :\n```sql\nDELETE FROM notes\nWHERE matiere = 'JavaScript'\n______ etudiant_id IN (SELECT id FROM etudiants WHERE ville = 'Sfax');\n```",
    "options": [],
    "reponse": ["AND"],
    "explication": "La clause AND permet de combiner la condition sur la matière avec la condition sur la ville de l'étudiant."
  },
  {
    "id": 7090,
    "type": "zone_saisie",
    "theme": "Bases de données",
    "niveau": "debutant",
    "question": "Complétez la commande SQL pour créer une table de sauvegarde des notes des étudiants tunisiens :\n```sql\nCREATE ______ NotesTunisie (id_etudiant INT, matiere VARCHAR(50), note DECIMAL);\n```",
    "options": [],
    "reponse": ["TABLE"],
    "explication": "Le mot-clé TABLE est nécessaire après CREATE pour définir la création d'une nouvelle table."
  },
  {
    "id": 7091,
    "type": "zone_saisie",
    "theme": "Bases de données",
    "niveau": "intermediaire",
    "question": "Complétez la commande SQL pour renommer la colonne 'adresse' en 'adresse_postale' dans la table des étudiants :\n```sql\nALTER TABLE etudiants\n______ adresse TO adresse_postale;\n```",
    "options": [],
    "reponse": ["RENAME COLUMN"],
    "explication": "La clause RENAME COLUMN permet de renommer une colonne existante dans une table."
  },
  {
    "id": 7092,
    "type": "saisie_libre",
    "theme": "Bases de données",
    "niveau": "intermediaire",
    "question": "Complétez la commande SQL pour activer la contrainte de vérification sur la colonne 'solde' de la table 'comptes_bancaires_tunisie' :\n```sql\nALTER TABLE comptes_bancaires_tunisie ______ CONSTRAINT chk_solde_positif;\n```",
    "options": [],
    "reponse": ["ENABLE"],
    "explication": "La commande ENABLE CONSTRAINT permet de réactiver une contrainte désactivée, ensuring que le solde respecte la condition définie."
  },
  {
    "id": 7093,
    "type": "saisie_libre",
    "theme": "Bases de données",
    "niveau": "intermediaire",
    "question": "Complétez la commande SQL pour désactiver temporairement la contrainte de clé étrangère sur la table 'commandes' pour permettre une maintenance :\n```sql\nALTER TABLE commandes ______ CONSTRAINT fk_client_id;\n```",
    "options": [],
    "repose": ["DISABLE"],
    "explication": "La commande DISABLE CONSTRAINT permet de désactiver une contrainte sans la supprimer, facilitant les opérations de masse ou de correction de données."
  },
  {
    "id": 7094,
    "type": "zone_saisie",
    "theme": "Bases de données",
    "niveau": "intermediaire",
    "question": "Complétez la requête SQL pour calculer la moyenne des notes par classe :\n```sql\nSELECT classe, AVG(note) AS moyenne\nFROM etudiants, notes\nWHERE etudiants.id = notes.etudiant_id\n______ classe;\n```",
    "options": [],
    "reponse": ["GROUP BY"],
    "explication": "La clause GROUP BY permet de regrouper les résultats par classe pour calculer la moyenne de chaque groupe."
  },
  {
    "id": 7095,
    "type": "zone_saisie",
    "theme": "Bases de données",
    "niveau": "avance",
    "question": "Complétez la requête SQL pour filtrer les élèves ayant une moyenne supérieure à 15 :\n```sql\nSELECT nom, classe, AVG(note) AS moyenne\nFROM etudiants, notes\nWHERE etudiants.id = notes.etudiant_id\nGROUP BY nom, classe\n______ moyenne > 15;\n```",
    "options": [],
    "reponse": ["HAVING"],
    "explication": "La clause HAVING permet de filtrer les résultats après un GROUP BY sur une valeur agrégée comme la moyenne."
  }
]